// Code generated by MockGen. DO NOT EDIT.
// Source: internal/retry/retry.go
//
// Generated by this command:
//
//	mockgen -source=internal/retry/retry.go -destination=internal/mocks/retry_mock.go -package=mocks OrderProcessor
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	service "github.com/cshep4/resiliency-patterns/external-dependency-risk/retry/internal/service"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderProcessor is a mock of OrderProcessor interface.
type MockOrderProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockOrderProcessorMockRecorder
	isgomock struct{}
}

// MockOrderProcessorMockRecorder is the mock recorder for MockOrderProcessor.
type MockOrderProcessorMockRecorder struct {
	mock *MockOrderProcessor
}

// NewMockOrderProcessor creates a new mock instance.
func NewMockOrderProcessor(ctrl *gomock.Controller) *MockOrderProcessor {
	mock := &MockOrderProcessor{ctrl: ctrl}
	mock.recorder = &MockOrderProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderProcessor) EXPECT() *MockOrderProcessorMockRecorder {
	return m.recorder
}

// ProcessOrder mocks base method.
func (m *MockOrderProcessor) ProcessOrder(ctx context.Context, request service.OrderRequest) (service.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessOrder", ctx, request)
	ret0, _ := ret[0].(service.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessOrder indicates an expected call of ProcessOrder.
func (mr *MockOrderProcessorMockRecorder) ProcessOrder(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOrder", reflect.TypeOf((*MockOrderProcessor)(nil).ProcessOrder), ctx, request)
}
