// Code generated by MockGen. DO NOT EDIT.
// Source: internal/circuitbreaker/circuitbreaker.go
//
// Generated by this command:
//
//	mockgen -source=internal/circuitbreaker/circuitbreaker.go -destination=internal/mocks/circuitbreaker_mock.go -package=mocks PaymentProcessor
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	service "github.com/cshep4/resiliency-patterns/external-dependency-risk/circuit-breaker/internal/service"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentProcessor is a mock of PaymentProcessor interface.
type MockPaymentProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentProcessorMockRecorder
	isgomock struct{}
}

// MockPaymentProcessorMockRecorder is the mock recorder for MockPaymentProcessor.
type MockPaymentProcessorMockRecorder struct {
	mock *MockPaymentProcessor
}

// NewMockPaymentProcessor creates a new mock instance.
func NewMockPaymentProcessor(ctrl *gomock.Controller) *MockPaymentProcessor {
	mock := &MockPaymentProcessor{ctrl: ctrl}
	mock.recorder = &MockPaymentProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentProcessor) EXPECT() *MockPaymentProcessorMockRecorder {
	return m.recorder
}

// ProcessPayment mocks base method.
func (m *MockPaymentProcessor) ProcessPayment(ctx context.Context, request service.PaymentRequest) (service.PaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayment", ctx, request)
	ret0, _ := ret[0].(service.PaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessPayment indicates an expected call of ProcessPayment.
func (mr *MockPaymentProcessorMockRecorder) ProcessPayment(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayment", reflect.TypeOf((*MockPaymentProcessor)(nil).ProcessPayment), ctx, request)
}
